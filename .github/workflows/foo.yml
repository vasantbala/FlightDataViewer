# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        shell: pwsh
        run: |
          $githubBaseUrl = 'https://api.github.com'
          $repoName = 'FlightDataViewer'
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"          
          $bearerToken = 'Bearer ' + {{ secrets.GH_API_TOKEN }}
          Write-Host $bearerToken
          $headers.Add("Authorization", $bearerToken)
          $url = $githubBaseUrl + '/repos/vasantbala/' + $repoName + '/pulls'
          $results = Invoke-RestMethod -Method Get -Uri $url -Headers $headers -ContentType "application/json"
          $now = [DateTime]::UtcNow
          Write-Host $prDate.DateTime
          $list = New-Object Collections.Generic.List[PRResult]
          $results | ForEach-Object {
            $prDate = [DateTime]$_.updated_at
            $diff = [TimeSpan]($now - $prDate)
            $prResult = New-Object PRResult
            $prResult.title = $_.title
            $prResult.daysWithoutResponse = $diff.TotalDays
            $prResult.owner = $_.user.login            
            $reviewUrl = $url + '/' + $_.number + '/reviews'
            $reviewResults = Invoke-RestMethod -Method Get -Uri $reviewUrl -Headers $headers -ContentType "application/json"
            $reviewersList = New-Object Collections.Generic.List[String]
            $reviewResults | ForEach-Object {
                if(!$reviewersList.Contains($_.user.login)){
                    $reviewersList.Add($_.user.login)
                }
            }
            $prResult.reviewers = $reviewersList.ToArray()
            if($reviewersList.Count -lt 2){
               $prResult.action = 'Reviewers Needed'
            }
            $list.Add($prResult)
          }
          $list | Format-Table -AutoSize