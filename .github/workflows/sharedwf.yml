# This is a basic workflow to help you get started with Actions

name: shared-workflow-example

# Controls when the workflow will run
on:
  #Shared 
  workflow_call:
    inputs:
      gh-url:
        required: true
        type: string
      gh-repo-name:
        required: true
        type: string
    secrets:
      gh-pat:
        required: true

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        shell: pwsh
        env:
          ghUrl: ${{ inputs.gh-url }}
          ghAPIToken: ${{ secrets.gh-pat }}
          ghRepoName: ${{ inputs.gh-repo-name }}
        run: |
          Class PRResult
          {
          [String] $title
          [String] $owner
          [int] $daysWithoutResponse
          [String[]] $reviewers
          [String] $action
          }
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"          
          $bearerToken = 'Bearer ' + $env:ghAPIToken
          Write-Host $bearerToken
          $headers.Add("Authorization", $bearerToken)
          $url = $env:ghUrl + '/repos/vasantbala/' + $env:ghRepoName + '/pulls'
          $results = Invoke-RestMethod -Method Get -Uri $url -Headers $headers -ContentType "application/json"
          $now = [DateTime]::UtcNow
          Write-Host $prDate.DateTime
          $list = New-Object Collections.Generic.List[PRResult]
          $results | ForEach-Object {
            $prDate = [DateTime]$_.updated_at
            $diff = [TimeSpan]($now - $prDate)
            $prResult = New-Object PRResult
            $prResult.title = $_.title
            $prResult.daysWithoutResponse = $diff.TotalDays
            $prResult.owner = $_.user.login            
            $reviewUrl = $url + '/' + $_.number + '/reviews'
            $reviewResults = Invoke-RestMethod -Method Get -Uri $reviewUrl -Headers $headers -ContentType "application/json"
            $reviewersList = New-Object Collections.Generic.List[String]
            $reviewResults | ForEach-Object {
                if(!$reviewersList.Contains($_.user.login)){
                    $reviewersList.Add($_.user.login)
                }
            }
            $prResult.reviewers = $reviewersList.ToArray()
            if($reviewersList.Count -lt 2){
               $prResult.action = 'Reviewers Needed'
            }
            $list.Add($prResult)
          }
          $list | Format-Table -AutoSize
          $payload = "{'body':'test body'}"       
          $testresults = Invoke-RestMethod -Method Post -Uri https://httpbin.org/anything -ContentType "application/json" -Body $payload
          $testresults.data